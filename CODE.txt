import 'package:flutter/material.dart';
import 'dart:async';

// Define the app's color palette at the top
const appColors = {
  'darkBlack': Color(0xFF0A0E21),
  'darkPurple': Color(0xFF1D1E33),
  'medBlue': Color(0xFF2A2D3E),
  'darkBlue': Color(0xFF1A1F38),
  'accent': Color(0xFF6C63FF),
  'accentLight10': Color(0x1A6C63FF),  // 10% opacity
  'accentLight20': Color(0x336C63FF),  // 20% opacity
  'accentLight40': Color(0x666C63FF),  // 40% opacity
  'accentLight70': Color(0xB36C63FF),  // 70% opacity
  'error': Color(0xFFFF5252),
  'errorLight10': Color(0x1AFF5252),   // 10% opacity
  'errorLight20': Color(0x33FF5252),   // 20% opacity
  'errorLight40': Color(0x66FF5252),   // 40% opacity
  'errorLight70': Color(0xB3FF5252),   // 70% opacity
  'white': Color(0xFFFFFFFF),
  'white70': Color(0xB3FFFFFF),        // 70% opacity
  'white50': Color(0x80FFFFFF),        // 50% opacity
  'white20': Color(0x33FFFFFF),        // 20% opacity
  'black20': Color(0x33000000),        // 20% opacity
  'shadow': Color(0x40000000),         // shadow color
};

// Define the app's icon constants at the top
const appIcons = {
  'profile': Icons.account_circle,
  'skull': Icons.shield,
  'backpack': Icons.backpack,
  'gem': Icons.star,
  'quest': Icons.list,
  'strength': Icons.fitness_center,
  'vitality': Icons.favorite,
  'agility': Icons.bolt,
  'intelligence': Icons.lightbulb,
  'sense': Icons.remove_red_eye,
  'sleep': Icons.nightlight_round,
  'workout': Icons.fitness_center,
  'cardio': Icons.directions_run,
  'flexibility': Icons.accessibility,
  'custom': Icons.add,
};

class PlayerData {
  static Map<String, dynamic> playerStats = {
    'name': 'PLAYER',
    'level': 1,
    'hp': 100,
    'mp': 50,
    'strength': 0,
    'vitality': 0,
    'agility': 0,
    'intelligence': 0,
    'sense': 0,
    'damageReduction': 0,
  };

  static bool isRandomQuests = false;
  static List<Map<String, dynamic>> availableQuests = [
    {
      'title': 'Push Ups',
      'target': 20,
      'icon': Icons.fitness_center,
      'stat': 'strength',
      'statIncrease': 1,
      'color': appColors['accent'],
    },
    {
      'title': 'Sit Ups',
      'target': 30,
      'icon': Icons.accessibility,
      'stat': 'vitality',
      'statIncrease': 1,
      'color': appColors['accent'],
    },
    {
      'title': 'Squats',
      'target': 25,
      'icon': Icons.fitness_center,
      'stat': 'strength',
      'statIncrease': 1,
      'color': appColors['accent'],
    },
    {
      'title': 'Running',
      'target': 20,
      'icon': Icons.directions_run,
      'stat': 'agility',
      'statIncrease': 1,
      'color': appColors['accent'],
    },
    {
      'title': 'Sleep 8 Hours',
      'target': 8,
      'icon': Icons.nightlight_round,
      'stat': 'vitality',
      'statIncrease': 1,
      'color': appColors['accent'],
    },
  ];

  static Map<String, dynamic> questProgress = {};

  static void initializeQuests(bool isRandom, List<Map<String, dynamic>> selectedQuests) {
    isRandomQuests = isRandom;
    questProgress.clear();
    
    if (isRandom) {
      // Always include sleep quest
      questProgress['sleep'] = {
        'title': 'Sleep 8 Hours',
        'current': 0,
        'target': 8,
        'lastReset': DateTime.now().toIso8601String(),
        'completed': false,
        'icon': Icons.nightlight_round,
        'stat': 'vitality',
        'statIncrease': 1,
        'color': appColors['accent'],
      };
      
      // Randomly select 4 other quests
      final List<Map<String, dynamic>> questPool = List.from(availableQuests)
        ..removeWhere((quest) => quest['title'] == 'Sleep 8 Hours');
      questPool.shuffle();
      final selectedRandomQuests = questPool.take(4).toList();
      
      for (var quest in selectedRandomQuests) {
        final questId = quest['title'].toLowerCase().replaceAll(' ', '_');
        questProgress[questId] = {
          'title': quest['title'],
          'current': 0,
          'target': quest['target'],
          'lastReset': DateTime.now().toIso8601String(),
          'completed': false,
          'icon': quest['icon'],
          'stat': quest['stat'],
          'statIncrease': quest['statIncrease'],
          'color': quest['color'],
        };
      }
    } else {
      // Use selected quests
      for (var quest in selectedQuests) {
        final questId = quest['title'].toLowerCase().replaceAll(' ', '_');
        questProgress[questId] = {
          'title': quest['title'],
          'current': 0,
          'target': quest['target'],
          'lastReset': DateTime.now().toIso8601String(),
          'completed': false,
          'icon': quest['icon'],
          'stat': quest['stat'],
          'statIncrease': quest['statIncrease'],
          'color': quest['color'],
        };
      }
    }
  }

  static void checkAndResetQuests() {
    final now = DateTime.now();
    for (var quest in questProgress.keys) {
      final lastReset = DateTime.parse(questProgress[quest]['lastReset']);
      if (now.difference(lastReset).inHours >= 24) {
        if (!questProgress[quest]['completed']) {
          // Downgrade stats based on missed quest
          switch (quest) {
            case 'workouts':
              playerStats['strength'] = (playerStats['strength'] - 1).clamp(0, double.infinity);
              break;
            case 'cardio':
              playerStats['vitality'] = (playerStats['vitality'] - 1).clamp(0, double.infinity);
              break;
            case 'strength':
              playerStats['strength'] = (playerStats['strength'] - 2).clamp(0, double.infinity);
              break;
            case 'flexibility':
              playerStats['agility'] = (playerStats['agility'] - 1).clamp(0, double.infinity);
              break;
          }
        }
        // Reset quest
        questProgress[quest]['current'] = 0;
        questProgress[quest]['lastReset'] = now.toIso8601String();
        questProgress[quest]['completed'] = false;
      }
    }
  }

  static String getTimeRemaining(String quest) {
    final lastReset = DateTime.parse(questProgress[quest]['lastReset']);
    final now = DateTime.now();
    final nextReset = lastReset.add(const Duration(hours: 24));
    final remaining = nextReset.difference(now);
    
    if (remaining.isNegative) return '00:00:00';
    
    final hours = remaining.inHours;
    final minutes = remaining.inMinutes % 60;
    final seconds = remaining.inSeconds % 60;
    return '${hours.toString().padLeft(2, '0')}:${minutes.toString().padLeft(2, '0')}:${seconds.toString().padLeft(2, '0')}';
  }

  static void updateQuestProgress(String quest, int progress) {
    questProgress[quest]['current'] = progress;
    if (progress >= questProgress[quest]['target']) {
      questProgress[quest]['completed'] = true;
      // Upgrade stats based on completed quest
      switch (quest) {
        case 'workouts':
          playerStats['strength'] = (playerStats['strength'] + 1);
          break;
        case 'cardio':
          playerStats['vitality'] = (playerStats['vitality'] + 1);
          break;
        case 'strength':
          playerStats['strength'] = (playerStats['strength'] + 2);
          break;
        case 'flexibility':
          playerStats['agility'] = (playerStats['agility'] + 1);
          break;
      }
    }
  }

  static void initializeDefaultData() {
    // Data is already initialized with default values
  }

  static Map<String, dynamic> getAllStats() {
    return playerStats;
  }

  static void updateStat(String key, dynamic value) {
    playerStats[key] = value;
  }
}

class SplashScreen extends StatefulWidget {
  const SplashScreen({super.key});

  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> {
  @override
  void initState() {
    super.initState();
    Timer(const Duration(seconds: 3), () {
      Navigator.of(context).pushReplacement(
        MaterialPageRoute(builder: (context) => const NameSelectionScreen()),
      );
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF1a237e),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Container(
              padding: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(15),
                boxShadow: [
                  BoxShadow(
                    color: appColors['accentLight40']!,
                    spreadRadius: 2,
                    blurRadius: 10,
                  ),
                ],
                border: Border.all(
                  color: const Color(0xFF64ffda),
                  width: 2,
                ),
              ),
              child: const Text(
                'Created by\nSadiq Entertainment',
                textAlign: TextAlign.center,
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 32,
                  fontWeight: FontWeight.bold,
                  letterSpacing: 2,
                ),
              ),
            ),
            const SizedBox(height: 20),
            const CircularProgressIndicator(
              valueColor: AlwaysStoppedAnimation<Color>(Color(0xFF64ffda)),
            ),
          ],
        ),
      ),
    );
  }
}

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Solo Gainz',
      theme: ThemeData(
        primarySwatch: Colors.indigo,
        scaffoldBackgroundColor: appColors['darkBlack'],
        appBarTheme: AppBarTheme(
          backgroundColor: appColors['darkBlack'],
          foregroundColor: Colors.white,
          elevation: 0,
        ),
        bottomNavigationBarTheme: BottomNavigationBarThemeData(
          backgroundColor: appColors['darkPurple'],
          selectedItemColor: appColors['accent'],
          unselectedItemColor: Colors.white70,
        ),
        useMaterial3: true,
      ),
      home: const SplashScreen(),
    );
  }
}

class NameSelectionScreen extends StatefulWidget {
  const NameSelectionScreen({super.key});

  @override
  State<NameSelectionScreen> createState() => _NameSelectionScreenState();
}

class _NameSelectionScreenState extends State<NameSelectionScreen> {
  final TextEditingController _nameController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF1a237e),
      body: Center(
        child: Container(
          margin: const EdgeInsets.all(20),
          padding: const EdgeInsets.all(20),
          decoration: BoxDecoration(
            color: appColors['darkPurple'],
            borderRadius: const BorderRadius.all(Radius.circular(15)),
            boxShadow: [
              BoxShadow(
                color: appColors['accentLight40']!,
                spreadRadius: 2,
                blurRadius: 10,
                offset: const Offset(0, 3),
              ),
            ],
            border: Border.all(
              color: appColors['accent']!,
              width: 2,
            ),
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Text(
                'ENTER YOUR NAME',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  letterSpacing: 2,
                ),
              ),
              const SizedBox(height: 20),
              TextField(
                controller: _nameController,
                style: const TextStyle(color: Colors.white),
                decoration: InputDecoration(
                  hintText: 'Enter your name...',
                  hintStyle: TextStyle(color: appColors['white50']),
                  enabledBorder: const OutlineInputBorder(
                    borderSide: BorderSide(color: Color(0xFF6C63FF)),
                    borderRadius: BorderRadius.all(Radius.circular(8)),
                  ),
                  focusedBorder: const OutlineInputBorder(
                    borderSide: BorderSide(color: Color(0xFF6C63FF), width: 2),
                    borderRadius: BorderRadius.all(Radius.circular(8)),
                  ),
                ),
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  if (_nameController.text.isNotEmpty) {
                    PlayerData.updateStat('name', _nameController.text.toUpperCase());
                    Navigator.of(context).pushReplacement(
                      MaterialPageRoute(builder: (context) => const QuestSelectionScreen()),
                    );
                  }
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: appColors['accent'],
                  padding: const EdgeInsets.symmetric(horizontal: 40, vertical: 15),
                  shape: const RoundedRectangleBorder(
                    borderRadius: BorderRadius.all(Radius.circular(8)),
                  ),
                ),
                child: const Text(
                  'START',
                  style: TextStyle(
                    color: Color(0xFF1a237e),
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
//PART2:
class QuestSelectionScreen extends StatefulWidget {
  const QuestSelectionScreen({super.key});

  @override
  State<QuestSelectionScreen> createState() => _QuestSelectionScreenState();
}

class _QuestSelectionScreenState extends State<QuestSelectionScreen> {
  bool isRandomQuests = false;
  List<Map<String, dynamic>> selectedQuests = [];
  final _questNameController = TextEditingController();
  final _questTargetController = TextEditingController();
  String selectedStat = 'strength';
  
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF0A0E21),
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [Color(0xFF0A0E21), Color(0xFF1D1E33)],
          ),
        ),
        child: SafeArea(
          child: Padding(
            padding: const EdgeInsets.all(20),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'QUEST SETUP',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 28,
                    fontWeight: FontWeight.bold,
                    letterSpacing: 2,
                  ),
                ),
                const SizedBox(height: 20),
                Container(
                  padding: const EdgeInsets.all(20),
                  decoration: BoxDecoration(
                    color: appColors['darkPurple'],
                    borderRadius: const BorderRadius.all(Radius.circular(20)),
                    boxShadow: [
                      BoxShadow(
                        color: appColors['black20']!,
                        blurRadius: 10,
                        spreadRadius: 1,
                      ),
                    ],
                  ),
                  child: Column(
                    children: [
                      SwitchListTile(
                        title: const Text(
                          'Random Daily Quests',
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        subtitle: Text(
                          'Quests will change daily with Sleep 8 Hours as standard',
                          style: TextStyle(
                            color: Colors.white.withOpacity(0.7),
                            fontSize: 14,
                          ),
                        ),
                        value: isRandomQuests,
                        onChanged: (value) {
                          setState(() {
                            isRandomQuests = value;
                            selectedQuests.clear();
                          });
                        },
                        activeColor: const Color(0xFF64ffda),
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 20),
                if (!isRandomQuests) ...[
                  Text(
                    'SELECT 5 QUESTS',
                    style: TextStyle(
                      color: appColors['white70'],
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 10),
                  Expanded(
                    child: ListView(
                      children: [
                        ...PlayerData.availableQuests.map((quest) => _buildQuestTile(quest)),
                        _buildAddCustomQuestTile(),
                      ],
                    ),
                  ),
                ],
                const SizedBox(height: 20),
                SizedBox(
                  width: double.infinity,
                  child: ElevatedButton(
                    onPressed: () {
                      if (isRandomQuests || selectedQuests.length == 5) {
                        PlayerData.initializeQuests(isRandomQuests, selectedQuests);
                        Navigator.of(context).pushReplacement(
                          MaterialPageRoute(builder: (context) => const MyHomePage()),
                        );
                      }
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color(0xFF64ffda),
                      padding: const EdgeInsets.symmetric(vertical: 15),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: const Text(
                      'START TRAINING',
                      style: TextStyle(
                        color: Color(0xFF0A0E21),
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildQuestTile(Map<String, dynamic> quest) {
    final isSelected = selectedQuests.contains(quest);
    return Container(
      margin: const EdgeInsets.only(bottom: 10),
      decoration: BoxDecoration(
        color: appColors['darkPurple'],
        borderRadius: const BorderRadius.all(Radius.circular(15)),
        border: Border.all(
          color: isSelected ? appColors['accent']! : Colors.transparent,
          width: 2,
        ),
      ),
      child: ListTile(
        onTap: () {
          setState(() {
            if (isSelected) {
              selectedQuests.remove(quest);
            } else if (selectedQuests.length < 5) {
              selectedQuests.add(quest);
            }
          });
        },
        leading: Icon(
          quest['icon'] as IconData,
          color: quest['color'] as Color,
          size: 28,
        ),
        title: Text(
          quest['title'] as String,
          style: const TextStyle(
            color: Colors.white,
            fontSize: 16,
            fontWeight: FontWeight.bold,
          ),
        ),
        subtitle: Text(
          'Target: ${quest['target']} | +${quest['statIncrease']} ${quest['stat']}',
          style: TextStyle(
            color: appColors['white70'],
            fontSize: 14,
          ),
        ),
        trailing: isSelected
            ? const Icon(Icons.check_circle, color: Color(0xFF64ffda))
            : null,
      ),
    );
  }

  Widget _buildAddCustomQuestTile() {
    return Container(
      margin: const EdgeInsets.only(bottom: 10),
      decoration: BoxDecoration(
        color: appColors['darkPurple'],
        borderRadius: const BorderRadius.all(Radius.circular(15)),
        border: Border(
          top: BorderSide(color: appColors['accent']!, width: 2),
          left: BorderSide(color: appColors['accent']!, width: 2),
          right: BorderSide(color: appColors['accent']!, width: 2),
          bottom: BorderSide(color: appColors['accent']!, width: 2),
        ),
      ),
      child: ListTile(
        onTap: () {
          _showAddCustomQuestDialog();
        },
        leading: Icon(
          Icons.add_circle_outline,
          color: appColors['accent'],
          size: 28,
        ),
        title: const Text(
          'Add Custom Quest',
          style: TextStyle(
            color: Colors.white,
            fontSize: 16,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
    );
  }

  void _showAddCustomQuestDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: appColors['darkPurple'],
        shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.all(Radius.circular(20)),
        ),
        title: const Text(
          'Create Custom Quest',
          style: TextStyle(
            color: Colors.white,
            fontSize: 20,
            fontWeight: FontWeight.bold,
          ),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: _questNameController,
              style: const TextStyle(color: Colors.white),
              decoration: InputDecoration(
                labelText: 'Quest Name',
                labelStyle: TextStyle(
                  color: appColors['white70'],
                ),
                enabledBorder: OutlineInputBorder(
                  borderSide: BorderSide(
                    color: appColors['white20']!,
                  ),
                  borderRadius: const BorderRadius.all(Radius.circular(10)),
                ),
                focusedBorder: OutlineInputBorder(
                  borderSide: BorderSide(
                    color: appColors['accent']!,
                  ),
                  borderRadius: const BorderRadius.all(Radius.circular(10)),
                ),
              ),
            ),
            const SizedBox(height: 15),
            TextField(
              controller: _questTargetController,
              style: const TextStyle(color: Colors.white),
              keyboardType: TextInputType.number,
              decoration: InputDecoration(
                labelText: 'Target Count',
                labelStyle: TextStyle(color: appColors['white50']),
                enabledBorder: OutlineInputBorder(
                  borderSide: BorderSide(color: appColors['white20']!),
                  borderRadius: const BorderRadius.all(Radius.circular(10)),
                ),
                focusedBorder: const OutlineInputBorder(
                  borderSide: BorderSide(color: Color(0xFF64ffda)),
                  borderRadius: BorderRadius.all(Radius.circular(10)),
                ),
              ),
            ),
            const SizedBox(height: 15),
            DropdownButtonFormField<String>(
              value: selectedStat,
              dropdownColor: const Color(0xFF1D1E33),
              style: const TextStyle(color: Colors.white),
              decoration: InputDecoration(
                labelText: 'Stat to Increase',
                labelStyle: TextStyle(color: appColors['white50']),
                enabledBorder: OutlineInputBorder(
                  borderSide: BorderSide(color: appColors['white20']!),
                  borderRadius: const BorderRadius.all(Radius.circular(10)),
                ),
                focusedBorder: const OutlineInputBorder(
                  borderSide: BorderSide(color: Color(0xFF64ffda)),
                  borderRadius: BorderRadius.all(Radius.circular(10)),
                ),
              ),
              items: [
                'strength',
                'vitality',
                'agility',
                'intelligence',
                'sense',
              ].map((String stat) {
                return DropdownMenuItem<String>(
                  value: stat,
                  child: Text(
                    stat.toUpperCase(),
                    style: const TextStyle(color: Colors.white),
                  ),
                );
              }).toList(),
              onChanged: (String? value) {
                if (value != null) {
                  setState(() {
                    selectedStat = value;
                  });
                }
              },
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
            },
            child: const Text(
              'CANCEL',
              style: TextStyle(color: Color(0xFF64ffda)),
            ),
          ),
          ElevatedButton(
            onPressed: () {
              if (_questNameController.text.isNotEmpty &&
                  _questTargetController.text.isNotEmpty) {
                final newQuest = {
                  'title': _questNameController.text,
                  'target': int.parse(_questTargetController.text),
                  'icon': Icons.star,
                  'stat': selectedStat,
                  'statIncrease': 1,
                  'color': const Color(0xFF64ffda),
                };
                setState(() {
                  PlayerData.availableQuests.add(newQuest);
                });
                Navigator.of(context).pop();
                _questNameController.clear();
                _questTargetController.clear();
              }
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color(0xFF64ffda),
            ),
            child: const Text(
              'CREATE',
              style: TextStyle(color: Color(0xFF1D1E33)),
            ),
          ),
        ],
      ),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key});

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _selectedIndex = 0;
  final PageController _pageController = PageController();

  static const List<Widget> _pages = <Widget>[
    ProfileView(),
    SkullView(),
    BackpackView(),
    GemView(),
    QuestView(),
  ];

  @override
  void initState() {
    super.initState();
    _pageController.addListener(() {
      final newIndex = _pageController.page?.round() ?? 0;
      if (newIndex != _selectedIndex) {
        setState(() {
          _selectedIndex = newIndex;
        });
      }
    });
  }

  @override
  void dispose() {
    _pageController.dispose();
    super.dispose();
  }

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
      _pageController.animateToPage(
        index,
        duration: const Duration(milliseconds: 300),
        curve: Curves.easeInOut,
      );
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: const Color(0xFF1a237e),
        elevation: 0,
      ),
      body: PageView(
        controller: _pageController,
        children: _pages,
        onPageChanged: (index) {
          setState(() {
            _selectedIndex = index;
          });
        },
      ),
      bottomNavigationBar: BottomNavigationBar(
        type: BottomNavigationBarType.fixed,
        currentIndex: _selectedIndex,
        onTap: _onItemTapped,
        items: const <BottomNavigationBarItem>[
          BottomNavigationBarItem(
            icon: Icon(Icons.account_circle_outlined),
            activeIcon: Icon(Icons.account_circle),
            label: 'Profile',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.shield_outlined),
            activeIcon: Icon(Icons.shield),
            label: 'Skull',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.backpack_outlined),
            activeIcon: Icon(Icons.backpack),
            label: 'Backpack',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.star_outline),
            activeIcon: Icon(Icons.star),
            label: 'Gems',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.list_outlined),
            activeIcon: Icon(Icons.list),
            label: 'Quests',
          ),
        ],
      ),
    );
  }
}

class ProfileView extends StatefulWidget {
  const ProfileView({super.key});

  @override
  State<ProfileView> createState() => _ProfileViewState();
}

class _ProfileViewState extends State<ProfileView> {
  Map<String, dynamic> playerStats = {};

  @override
  void initState() {
    super.initState();
    _loadPlayerStats();
  }

  Future<void> _loadPlayerStats() async {
    final stats = PlayerData.getAllStats();
    setState(() {
      playerStats = stats;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: const BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
          colors: [Color(0xFF0A0E21), Color(0xFF1D1E33)],
        ),
      ),
      child: SingleChildScrollView(
        padding: const EdgeInsets.fromLTRB(24, 40, 24, 24),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Center(
              child: Container(
                padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 15),
                decoration: BoxDecoration(
                  color: const Color(0xFF1D1E33),
                  borderRadius: BorderRadius.circular(20),
                  boxShadow: [
                    BoxShadow(
                      color: const Color(0xFF64ffda).withOpacity(0.2),
                      blurRadius: 15,
                      spreadRadius: 2,
                    ),
                  ],
                ),
                child: Column(
                  children: [
                    Text(
                      playerStats['name'] ?? 'PLAYER',
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 28,
                        fontWeight: FontWeight.bold,
                        letterSpacing: 2,
                      ),
                    ),
                    const SizedBox(height: 8),
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      decoration: BoxDecoration(
                        color: appColors['accentLight10'],
                        borderRadius: BorderRadius.circular(10),
                      ),
                      child: Text(
                        'LEVEL ${playerStats['level'] ?? 1}',
                        style: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 30),
            _buildStatBar('HP', '${playerStats['hp'] ?? 100}', 1.0),
            const SizedBox(height: 15),
            _buildStatBar('MP', '${playerStats['mp'] ?? 50}', 1.0),
            const SizedBox(height: 30),
            Container(
              padding: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                color: const Color(0xFF1D1E33),
                borderRadius: BorderRadius.circular(20),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.2),
                    blurRadius: 10,
                    spreadRadius: 1,
                  ),
                ],
              ),
              child: Column(
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      _buildStatTile('STRENGTH', '${playerStats['strength'] ?? 0}', Icons.fitness_center),
                      _buildStatTile('VITALITY', '${playerStats['vitality'] ?? 0}', Icons.favorite),
                    ],
                  ),
                  const SizedBox(height: 20),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      _buildStatTile('AGILITY', '${playerStats['agility'] ?? 0}', Icons.bolt),
                      _buildStatTile('INTELLIGENCE', '${playerStats['intelligence'] ?? 0}', Icons.lightbulb),
                    ],
                  ),
                  const SizedBox(height: 20),
                  _buildStatTile('SENSE', '${playerStats['sense'] ?? 0}', Icons.remove_red_eye),
                ],
              ),
            ),
            const SizedBox(height: 30),
            Container(
              padding: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                color: const Color(0xFF1D1E33),
                borderRadius: BorderRadius.circular(20),
                gradient: LinearGradient(
                  colors: [
                    const Color(0xFF1D1E33),
                    const Color(0xFF64ffda).withOpacity(0.1),
                  ],
                ),
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  const Text(
                    'DAMAGE REDUCTION',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: BoxDecoration(
                      color: appColors['accentLight10'],
                      borderRadius: BorderRadius.circular(10),
                    ),
                    child: Text(
                      '${playerStats['damageReduction'] ?? 0}%',
                      style: const TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildStatTile(String label, String value, IconData icon) {
    return Container(
      padding: const EdgeInsets.all(15),
      decoration: BoxDecoration(
        color: appColors['darkBlack'],
        borderRadius: BorderRadius.circular(15),
      ),
      child: Row(
        children: [
          Icon(icon, color: appColors['accent'], size: 24),
          const SizedBox(width: 10),
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                label,
                style: const TextStyle(
                  color: Colors.white70,
                  fontSize: 14,
                  fontWeight: FontWeight.bold,
                ),
              ),
              Text(
                value,
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildStatBar(String label, String value, double progress) {
    final isHP = label == 'HP';
    final color = isHP ? appColors['error'] : appColors['accent'];
    final icon = isHP ? Icons.favorite : Icons.local_fire_department;
    const gradient = LinearGradient(
      colors: [
        
      ],
    );

    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: appColors['darkPurple'],
        borderRadius: const BorderRadius.all(Radius.circular(12)),
        boxShadow: const [
          BoxShadow(
            spreadRadius: 1,
            blurRadius: 5,
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Row(
                children: [
                  Icon(icon, color: color, size: 24),
                  const SizedBox(width: 8),
                  Text(
                    label,
                    style: TextStyle(
                      color: color,
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: BoxDecoration(
                  color: appColors['accentLight10'],
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Text(
                  value,
                  style: TextStyle(
                    color: color,
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          Container(
            height: 12,
            decoration: const BoxDecoration(
              borderRadius: BorderRadius.all(Radius.circular(6)),
            ),
            child: ClipRRect(
              borderRadius: const BorderRadius.all(Radius.circular(6)),
              child: Stack(
                children: [
                  Container(
                    decoration: const BoxDecoration(
                    ),
                  ),
                  FractionallySizedBox(
                    widthFactor: progress,
                    child: Container(
                      decoration: BoxDecoration(
                        gradient: gradient,
                        boxShadow: const [
                          BoxShadow(
                            blurRadius: 6,
                            spreadRadius: 2,
                          ),
                        ],
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}

class SkullView extends StatelessWidget {
  const SkullView({super.key});

  @override
  Widget build(BuildContext context) {
    return const Center(
      child: Text('Skull View'),
    );
  }
}

class BackpackView extends StatelessWidget {
  const BackpackView({super.key});

  @override
  Widget build(BuildContext context) {
    return const Center(
      child: Text('Backpack View'),
    );
  }
}

class GemView extends StatelessWidget {
  const GemView({super.key});

  @override
  Widget build(BuildContext context) {
    return const Center(
      child: Text('Gem View'),
    );
  }
}

class QuestView extends StatefulWidget {
  const QuestView({super.key});

  @override
  State<QuestView> createState() => _QuestViewState();
}

class _QuestViewState extends State<QuestView> {
  Timer? _timer;

  @override
  void initState() {
    super.initState();
    PlayerData.checkAndResetQuests();
    _timer = Timer.periodic(const Duration(seconds: 1), (_) => setState(() {}));
  }

  @override
  void dispose() {
    _timer?.cancel();
    super.dispose();
  }

  void _updateQuestProgress(String questId, int progress) {
    setState(() {
      PlayerData.updateQuestProgress(questId, progress);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: const BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
          colors: [Color(0xFF0A0E21), Color(0xFF1D1E33)],
        ),
      ),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 15),
              decoration: BoxDecoration(
                color: const Color(0xFF1D1E33),
                borderRadius: BorderRadius.circular(20),
                boxShadow: [
                  BoxShadow(
                    color: const Color(0xFF64ffda).withOpacity(0.2),
                    blurRadius: 15,
                    spreadRadius: 2,
                  ),
                ],
              ),
              child: const Text(
                'DAILY TRAINING',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 28,
                  fontWeight: FontWeight.bold,
                  letterSpacing: 2,
                ),
              ),
            ),
            const SizedBox(height: 20),
            Expanded(
              child: ListView(
                children: [
                  ...PlayerData.questProgress.entries.map((entry) {
                    final questId = entry.key;
                    final quest = entry.value;
                    return _buildQuestCard(
                      quest['title'],
                      quest['current'] ?? 0,
                      quest['target'] ?? 0,
                      quest['color'] as Color,
                      quest['icon'] as IconData,
                      () {},
                      PlayerData.getTimeRemaining(questId),
                      '${quest['stat']} -${quest['statIncrease']} if not completed',
                    );
                  }).toList(),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildQuestCard(
    String title,
    int current,
    int target,
    Color color,
    IconData icon,
    VoidCallback onTap,
    String timeRemaining,
    String warning,
  ) {
    final progress = current / target;
    final percentage = (progress * 100).toInt();

    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      decoration: BoxDecoration(
        color: appColors['darkPurple'],
        borderRadius: const BorderRadius.all(Radius.circular(20)),
        boxShadow: [
          BoxShadow(
            color: appColors['shadow']!,
            blurRadius: 10,
            spreadRadius: 1,
          ),
        ],
      ),
      child: Material(
        color: Colors.transparent,
        child: Padding(
          padding: const EdgeInsets.all(20),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: appColors['accentLight10'],
                      borderRadius: BorderRadius.circular(15),
                      boxShadow: [
                        BoxShadow(
                          color: appColors['accentLight20']!,
                          blurRadius: 8,
                          spreadRadius: 1,
                        ),
                      ],
                    ),
                    child: Icon(icon, color: color, size: 28),
                  ),
                  const SizedBox(width: 15),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          title,
                          style: const TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                        ),
                        const SizedBox(height: 4),
                        Row(
                          children: [
                            IconButton(
                              onPressed: current > 0 ? () => _updateQuestProgress(title.toLowerCase().replaceAll(' ', '_'), current - 1) : null,
                              icon: Icon(Icons.remove_circle_outline, color: current > 0 ? appColors['error'] : appColors['white20']),
                              padding: EdgeInsets.zero,
                              constraints: const BoxConstraints(),
                            ),
                            const SizedBox(width: 8),
                            Text(
                              '$current/$target',
                              style: TextStyle(
                                color: appColors['white70'],
                                fontSize: 14,
                              ),
                            ),
                            const SizedBox(width: 8),
                            IconButton(
                              onPressed: current < target ? () => _updateQuestProgress(title.toLowerCase().replaceAll(' ', '_'), current + 1) : null,
                              icon: Icon(Icons.add_circle_outline, color: current < target ? appColors['accent'] : appColors['white20']),
                              padding: EdgeInsets.zero,
                              constraints: const BoxConstraints(),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: BoxDecoration(
                      color: appColors['accentLight10'],
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Text(
                      '$percentage%',
                      style: TextStyle(
                        color: appColors['accent'],
                        fontWeight: FontWeight.bold,
                        fontSize: 16,
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 15),
              Container(
                height: 8,
                decoration: BoxDecoration(
                  color: appColors['accentLight10'],
                  borderRadius: const BorderRadius.all(Radius.circular(4)),
                ),
                child: Row(
                  children: [
                    Expanded(
                      flex: percentage,
                      child: Container(
                        decoration: BoxDecoration(
                          color: appColors['accent'],
                          borderRadius: const BorderRadius.all(Radius.circular(4)),
                          boxShadow: [
                            BoxShadow(
                              color: appColors['accentLight40']!,
                              blurRadius: 6,
                              spreadRadius: 0,
                            ),
                          ],
                        ),
                      ),
                    ),
                    Expanded(
                      flex: 100 - percentage,
                      child: Container(),
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 12),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    timeRemaining,
                    style: TextStyle(
                      color: appColors['white70'],
                      fontSize: 14,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                  Text(
                    warning,
                    style: TextStyle(
                      color: appColors['errorLight70'],
                      fontSize: 14,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}
